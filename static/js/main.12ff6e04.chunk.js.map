{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sOAoBeA,EAlBF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GAEzB,OAEE,yBAAKC,UAAU,oDACd,yBAAKC,IAAI,QAAQC,IAAG,gCAA2BH,EAA3B,eACpB,6BACA,4BAAKF,GACL,4BAAKC,MCmBMK,EAzBE,SAAC,GAAe,IAAdC,EAAa,EAAbA,OAElB,OACC,6BAGIA,EAAOC,KAAI,SAACC,EAAKC,GACpB,OACE,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCDPW,EAbE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OACC,6BACA,2BACAV,UAAW,mCACXW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCcII,E,kDApBd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAM,CACVC,UAAS,GAHO,E,8DAOAC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKxB,OAAGG,KAAKJ,MAAMC,SACN,yDAEDG,KAAKL,MAAMO,a,GAjBQC,aCSbC,EATD,SAACT,GAGd,OACC,yBAAKU,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC/Db,EAAMO,WC8DMO,G,wDAzDd,aAAc,IAAD,8BACZ,gBAkBDC,eAAe,SAACC,GACf,EAAKV,SAAS,CAACW,YAAYD,EAAME,OAAOC,SAlBxC,EAAKlB,MAAM,CACVZ,OAAO,GACP4B,YAAY,IAJD,E,gEASO,IAAD,OAElBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,EAAKlB,SAAS,CAACjB,OAAOmC,S,+BAcf,IAAD,EACoBnB,KAAKJ,MAAzBZ,EADA,EACAA,OAAO4B,EADP,EACOA,YAERQ,EAAgBpC,EAAOqC,QAAO,SAAAC,GACnC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAEtD,OAAQvC,EAAOyC,OAMb,yBAAK7C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcU,KAAKU,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,OAASoC,OAVtB,2C,GApCejB,cCCEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACR,kBAAC,EAAD,MAECC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,a","file":"static/js/main.12ff6e04.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\t// const {name,email,id}= props;\r\n\treturn (\r\n\t\t\r\n\t\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' >\r\n\t\t\t\t<img alt='robot' src={`https://robohash.org/\"${id}\"?200x200`}/>\r\n\t\t\t\t<div >\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<h4>{email}</h4>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t\r\n\t\t\t);\r\n\r\n\t\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\t\r\nconst CardList = ({robots} ) => {\r\n\t\r\n return (\r\n \t<div>\r\n\t    \r\n\t    {\r\n\t    \trobots.map((user,i)=>{\r\n\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\r\n\t}\r\n   </div>\r\n\r\n \t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchChange}) =>{\r\nreturn (\r\n\t<div>\r\n\t<input \r\n\tclassName ='pa3 ba b--green bg-lightest-blue'\r\n\ttype=\"search\" \r\n\tplaceholder='search robots'\r\n\tonChange={searchChange}/>\r\n\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default SearchBox;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state={\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oooops .That is not good></h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n\r\n\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll',border:'5px solid black',height:'800px'}}>\r\n\t\t{props.children}\r\n\t\t</div>);\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n// a state is an object which describes the application\r\n\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots:[],\r\n\t\t\tsearchField:''\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users=>{\r\n\t\t\tthis.setState({robots:users})\r\n\t\t})\r\n\t\r\n\t}\r\n\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searchField:event.target.value})\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\r\n\r\n\r\n\trender(){\r\n\t\tconst {robots,searchField}=this.state;\r\n\t\t\r\n\t\tconst filteredRobots =robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn !robots.length ?\r\n\t\t <h1>Loading</h1>:\r\n\t\t\r\n\r\n\t\t\t\t (\r\n\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t\t<h1 className='f1'>Robofriends</h1>\r\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots ={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\r\n\t\t\t\t);\r\n\t\t\t\r\n\t\t}\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'; //The React Bot\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n\t<App/>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}